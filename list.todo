Picross:
Core stuff:
    ✔ Cell state representation
        -> Checked, crossed and empty states
    ✔ Grid state representation
        -> 1D array of cells
        -> Horizontal and vertical hints
        -> Row/column getters
        -> Various checks
    ✔ Grid/cell state manipulation
        -> Change cell states
        -> Change hints (autocheck valididty)
    ✔ Hint generation from grid state
    ✔ Is solvable and is solved checks
I/O:
    ✔ Text grid formatter
    ✔ XML grid serialization
    ✔ XML grid deserialization
User interaction:
    Interactive CLI app:
        ✔ CLI app generic menu
        ✔ CLI app generic command
        ✔ CLI app state object
        CLI app menus:
            Structures created statically on command chain instanciation
            ✔ Main menu 
                -> Create a grid
                    -> [Create grid command]
                    -> [Manipulate grid menu]
                -> Open a grid from XML file
                    -> [Load grid command]
                    -> [Manipulate grid menu]
                -> Quit
            ✔ Manipulate grid menu
                -> Solve grid
                    -> [Solver command]
                -> Modify grid
                    -> [Modify grid command]
                -> Save grid to file
                    -> [Save grid command]
                -> Close grid
                    -> [Main menu]
        CLI app commands:
            ✔ Create grid command 
                -> grid width?
                -> grid height?
                -> input all hints
                -> save grid in state
            ✔ Menu command
            ✔ Command sequence
            ✔ Load grid command 
                -> grid file path?
                -> read grid from file into state
            ✔ Save grid command
                -> grid file path?
                -> save grid in state to file
            ✔ Solve command
                -> list solvers
                -> which solver?
                -> copy grid and solve copy
                -> display solved grid
                -> ask to save in current state
            ✔ Display grid command
            ✔ Modify grid command
                Micro shell interpreting subcommands:
                    ✔ $ check <x> <y>                           # Check cell at coordinates (x;y)
                    ✔ $ cross <x> <y>                           # Cross cell at coordinates (x;y)
                    ✔ $ clear <x> <y>                           # Clear cell at coordinates (x;y)
                    ✔ $ <check|cross|clear> <x0:xn> <y0:xn>     # Check/cross/clear cells in coordinate range [x0 ; xn] × [y0 ; yn]
                    ✔ $ display [nohints]                       # Display grid with hints by default, without them when nohints is specified
                    ✔ $ hints <h|v> <n> <values>                # Set horizontal or vertical hints for row or column n to provided values
                    ✔ $ hints generate                          # Generate hints from grid state, overwriting current ones
                    ✔ $ commit                                  # Write changes to current grid
                    ✔ $ rollback                                # Discard changes and revert state back to last saved grid
                    ☐ $ undo                                    # Undo the last change on the grid
                    ✔ $ isSolved                                # Tells whether the grid is solved in its current state
                    ✔ $ hintCoherence                           # Tells whether the hints of the grid are coherent in their current state
                    ✔ $ exit                                    # Exit
Solving:
    ✔ Generic solver
    ☐ Iterative solver
    ☐ Inference engine
Cleanup & enhancement:
    Important:
        ✔ Use smart pointers in CLIMenu, CommandSequence and SolveGridCommand
        ✔ Alternatively ensure CLIMenu and CommandSequence destructors don't leak
        ✔ Also use smart pointers on instanciation of the main menu
        ✔ Put comments here and there
        ✔ Custom exceptions
        ✔ Use std::string::operator+ instead of abusing std::stringstreams
        ✔ Include folder name in all include-protection macros
        ✔ CMake build
        ✔ Inline fully specialized templates
        ✔ Make sure all polymorphically derived classes have a virtual destructor
        ✔ Reorganize all kinds of utils in the "tools" folder
        ✔ Ensure all argument copies are compiler-made when needed
        ✔ Also ensure heavy objects are otherwise passed as const references
        ☐ User wiki on GitHub
        ☐ Tech wiki on GitHub (?)
        ✔ Refactor CreateGridCommand::hintsArePositiveNonZero and PicrossShellHintsCommand::hintsArePositiveNonZero
        ☐ Refactor all "informative error logging" in exception logging blocks
        ☐ Include context where appriopriate in thrown exceptions (catch and re-throw in upper calls where appropriate)
        ☐ Improve exception handling chain and traceback
        ☐ Replace constant size arrays with std::arrays
        ☐ Have stdArray template parameters automatically deduced in test_cell_t.cpp
        ☐ Tests for Grid::merge
        ☐ Tests for Grid::row|colHintSum
        ☐ Tests for IterativeSolver
        ☐ Tests for std::to_string(Picross::cell_t)
        ☐ Tests for mergeSingleCell
    Nice:
        ✔ Generalize bounded input method (used in CLIMenu and SolveCommand)
        ✔ Better usage of std::endl (new line vs. buffer flushing)
        ✔ Cross-platform handling of new lines (+ fix hardcoded \n's)
        ✔ Make use of <algorithm>, <functional>, lambdas, etc where possible
        ✔ Ensure consistency of stream usage (err for exception printing only)
        ✔ Refactor `hints` shell command into subroutines
        ✔ Make CLI-related stuff its own library, with custom templated state et al
        ✔ Aliase templates where appropriate (shorten CLI* names)
        ✔ Have exhaustive #includes in all files
        ✔ Ensure syntactical coherence on reference and pointers (+ there should not be pointers anywhere)
        ✔ Ensure class members declaration order and syntactical coherence
        ✔ Remove empty constructors and destructors (unless virtual or required)
        ✔ Tests for CLI stuff
        ✔ Tests for shell stuff
        ✔ Have Windows print UTF8 characters properly
        ✔ Fix Catch2 for MinGW
        ✔ Tests for generic shell
        ✔ Tests for lambda maker
        ☐ Investigate MSYS makefiles failing to run
Bugs:
    ADD TESTS FOR EACH CASE BEFORE MARKING RESOLVED (if applicable)
    ✔ Grid text formatting with hints fails when either directional hints are all empty
    ✔ Grid text formatting with hints doesn't properly handle display of 2-digit hints
    ✔ XML grid serializer fails to read grid with no cells
    ✔ Exceptions in the shell are only caught at main menu level
    ✔ Horizontal empty hints get an extra space upon being text-formatted
    ✔ Setting hints as 0 in the shell effectively creates 0-hints in the grid
    ✔ Cannot set hints to empty in shell (too few arguments after <direction>)
Project management:
    ✔ Set up a git repo
    ✔ Come up with tests
    ✔ Set up continuous integration because why not
